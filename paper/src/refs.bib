
@article{prlicTenSimpleRules2012,
  langid = {english},
  title = {Ten {{Simple Rules}} for the {{Open Development}} of {{Scientific Software}}},
  volume = {8},
  issn = {1553-7358},
  url = {https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1002802},
  doi = {10.1371/journal.pcbi.1002802},
  number = {12},
  journaltitle = {PLOS Computational Biology},
  urldate = {2019-09-22},
  date = {2012-12-06},
  pages = {e1002802},
  author = {Prlić, Andreas and Procter, James B.}
}

@article{baxterScientificSoftwareDevelopment2006,
  langid = {english},
  title = {Scientific {{Software Development Is Not}} an {{Oxymoron}}},
  volume = {2},
  issn = {1553-7358},
  url = {https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.0020087},
  doi = {10/bs5b5b},
  number = {9},
  journaltitle = {PLOS Computational Biology},
  urldate = {2019-09-22},
  date = {2006-09-08},
  pages = {e87},
  author = {Baxter, Susan M. and Day, Steven W. and Fetrow, Jacquelyn S. and Reisinger, Stephanie J.}
}

@article{altschulAnatomySuccessfulComputational2013,
  langid = {english},
  title = {The Anatomy of Successful Computational Biology Software},
  volume = {31},
  issn = {1546-1696},
  url = {https://www.nature.com/articles/nbt.2721},
  doi = {10.1038/nbt.2721},
  abstract = {Creators of software widely used in computational biology discuss the factors that contributed to their success},
  number = {10},
  journaltitle = {Nature Biotechnology},
  urldate = {2019-09-22},
  date = {2013-10},
  pages = {894-897},
  author = {Altschul, Stephen and Demchak, Barry and Durbin, Richard and Gentleman, Robert and Krzywinski, Martin and Li, Heng and Nekrutenko, Anton and Robinson, James and Rasband, Wayne and Taylor, James and Trapnell, Cole}
}

@article{huIntegratingModernResearch2007,
  title = {Integrating {{Modern Research}} into {{Numerical Computation Education}}},
  volume = {9},
  doi = {10/chdgqw},
  abstract = {Scientific computation has grown in scope over the years, but today's needs are far beyond what people have experienced in traditional scientific fields such as physics, chemistry, and biology. Although the term "computing" might also mean information processing as opposed to numerical computation, it's increasingly difficult to draw a clear boundary between the two. As more disciplines require or desire computational skills, the crowds we teach will include not only future engineers and natural scientists but also social scientists, business analysts, or even casual learners. People in this learning community will contribute to computational science not by theoretically exploring the properties of numerical algorithms, but by applying or modifying existing numerical methods or methodologies to successfully solve problems in their respective fields. How we teach numerical computation to the crowds must be taken far beyond the discussions on the relevance and advantages of computational software or programming languages. Whether repackaging what we teach would prepare students better - numerically speaking - remains to be seen. However, we must find ways to integrate modern scientific computation research results into our curricula.},
  number = {5},
  journaltitle = {Computing in Science Engineering},
  date = {2007-09},
  pages = {78-81},
  author = {Hu, C.}
}

@inproceedings{smithSoftwareCarpentry2018,
  title = {Beyond {{Software Carpentry}}},
  abstract = {About 20 years ago the need for scientists and engineers to have basic knowledge of software development skills and tools became apparent. Without these so-called software carpentry skills, developers were wasting time and compromising the quality of their work. Since that time great progress has been made with software carpentry, as evidenced by the growing understanding of the importance of tools, and by the growth of the namesake Software Carpentry foundation and other similar projects. With scientific software developers now prepared to move forward, we should turn our attention to the next logical step after carpentry: Software Engineering (SE) applied to Scientific Computing Software (SCS). Past attempts with SE for SCS have not always been successful; therefore, this paper proposes a vision for future success, including SE specifically adapting ideas to SCS, SCS recognizing the value of software artifacts other than the code, and all parties increasing the emphasis on empirical evidence and the quality of replicability. Several ideas are proposed for turning the proposed vision into a reality, including promoting requirements documentation for replicability, building assurance cases for correctness (and other qualities), and automatic generation of all documentation and code.},
  eventtitle = {2018 {{IEEE}}/{{ACM}} 13th {{International Workshop}} on {{Software Engineering}} for {{Science}} ({{SE4Science}})},
  booktitle = {2018 {{IEEE}}/{{ACM}} 13th {{International Workshop}} on {{Software Engineering}} for {{Science}} ({{SE4Science}})},
  date = {2018-06},
  pages = {32-39},
  author = {Smith, S.}
}

@article{wilsonSoftwareCarpentryGetting2006,
  title = {Software {{Carpentry}}: {{Getting Scientists}} to {{Write Better Code}} by {{Making Them More Productive}}},
  volume = {8},
  doi = {10.1109/MCSE.2006.122},
  shorttitle = {Software {{Carpentry}}},
  abstract = {For the past years, my colleagues and I have developed a one-semester course that teaches scientists and engineers the "common core" of modern software development. Our experience shows that an investment of 150 hours-25 of lectures and the rest of practical work-can improve productivity by roughly 20 percent. That's one day a week, one less semester in a master's degree, or one less year for a typical PhD. The course is called software carpentry, rather than software engineering, to emphasize the fact that it focuses on small-scale and immediately practical issues. All of the material is freely available under an open-source license at www.swc.scipy.org and can be used both for self-study and in the classroom. This article describes what the course contains, and why},
  number = {6},
  journaltitle = {Computing in Science Engineering},
  date = {2006-11},
  pages = {66-69},
  author = {Wilson, G.}
}

@article{michaud-agrawalMDAnalysisToolkitAnalysis2011,
  langid = {english},
  title = {{{MDAnalysis}}: {{A}} Toolkit for the Analysis of Molecular Dynamics Simulations},
  volume = {32},
  issn = {1096-987X},
  url = {https://www.onlinelibrary.wiley.com/doi/abs/10.1002/jcc.21787},
  doi = {10/dknb8h},
  shorttitle = {{{MDAnalysis}}},
  abstract = {MDAnalysis is an object-oriented library for structural and temporal analysis of molecular dynamics (MD) simulation trajectories and individual protein structures. It is written in the Python language with some performance-critical code in C. It uses the powerful NumPy package to expose trajectory data as fast and efficient NumPy arrays. It has been tested on systems of millions of particles. Many common file formats of simulation packages including CHARMM, Gromacs, Amber, and NAMD and the Protein Data Bank format can be read and written. Atoms can be selected with a syntax similar to CHARMM's powerful selection commands. MDAnalysis enables both novice and experienced programmers to rapidly write their own analytical tools and access data stored in trajectories in an easily accessible manner that facilitates interactive explorative analysis. MDAnalysis has been tested on and works for most Unix-based platforms such as Linux and Mac OS X. It is freely available under the GNU General Public License from http://mdanalysis.googlecode.com. © 2011 Wiley Periodicals, Inc. J Comput Chem 2011},
  number = {10},
  journaltitle = {Journal of Computational Chemistry},
  urldate = {2019-09-22},
  date = {2011},
  pages = {2319-2327},
  author = {Michaud‐Agrawal, Naveen and Denning, Elizabeth J. and Woolf, Thomas B. and Beckstein, Oliver}
}

@article{gobleBetterSoftwareBetter2014,
  title = {Better {{Software}}, {{Better Research}}},
  volume = {18},
  doi = {10/vjz},
  abstract = {Modern scientific research isn't possible without software. However, its vital role is often overlooked by funders, universities, assessment committees, and even the research community itself. This is a serious issue that needs urgent attention. This article raises a number of points concerning quality, code review, and openness; development practices and training in scientific computing; career recognition of research software engineers; and sustainability models for funding scientific software. We must get software recognized to be the first-class experimental scientific instrument that it is and get "better software for better research."},
  number = {5},
  journaltitle = {IEEE Internet Computing},
  date = {2014-09},
  pages = {4-8},
  author = {Goble, C.}
}

@article{basiliUnderstandingHighPerformanceComputingCommunity2008,
  title = {Understanding the {{High}}-{{Performance}}-{{Computing Community}}: {{A Software Engineer}}'s {{Perspective}}},
  volume = {25},
  doi = {10/fqs7r4},
  shorttitle = {Understanding the {{High}}-{{Performance}}-{{Computing Community}}},
  abstract = {Computational scientists developing software for HPC systems face unique software engineering issues. Attempts to transfer SE technologies to this domain must take these issues into account.},
  number = {4},
  journaltitle = {IEEE Software},
  date = {2008-07},
  pages = {29-36},
  author = {Basili, V. R. and Carver, J. C. and Cruzes, D. and Hochstein, L. M. and Hollingsworth, J. K. and Shull, F. and Zelkowitz, M. V.}
}

@article{weirSmallChangesBig2019,
  langid = {english},
  title = {Small Changes, Big Gains: {{A}} Curriculum-Wide Study of Teaching Practices and Student Learning in Undergraduate Biology},
  volume = {14},
  issn = {1932-6203},
  url = {https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0220900},
  doi = {10/gf675b},
  shorttitle = {Small Changes, Big Gains},
  abstract = {A growing body of evidence has shown that active learning has a considerable advantage over traditional lecture for student learning in undergraduate STEM classes, but there have been few large-scale studies to identify the specific types of activities that have the greatest impact on learning. We therefore undertook a large-scale, curriculum-wide study to investigate the effects of time spent on a variety of classroom activities on learning gains. We quantified classroom practices and related these to student learning, assessed using diagnostic tests written by over 3700 students, across 31 undergraduate biology classes at a research-intensive university in the Pacific Northwest. The most significant positive predictor of learning gains was the use of group work, supporting the findings of previous studies. Strikingly, we found that the addition of worksheets as an active learning tool for in-class group activities had the strongest impact on diagnostic test scores. This particular low-tech activity promotes student collaboration, develops problem solving skills, and can be used to inform the instructor about what students are struggling with, thus providing opportunities for valuable and timely feedback. Overall, our results indicate that group activities with low barriers to entry, such as worksheets, can result in significant learning gains in undergraduate science.},
  number = {8},
  journaltitle = {PLOS ONE},
  urldate = {2019-10-02},
  date = {2019-08-28},
  pages = {e0220900},
  author = {Weir, Laura K. and Barker, Megan K. and McDonnell, Lisa M. and Schimpf, Natalie G. and Rodela, Tamara M. and Schulte, Patricia M.}
}

@collection{bransfordHowPeopleLearn2000,
  langid = {english},
  location = {{Washington, D.C}},
  title = {How People Learn: Brain, Mind, Experience, and School},
  edition = {Expanded ed},
  isbn = {978-0-585-32107-3 978-0-309-07036-2},
  shorttitle = {How People Learn},
  pagetotal = {374},
  publisher = {{National Academy Press}},
  date = {2000},
  editor = {Bransford, John and National Research Council (U.S.) and National Research Council (U.S.)}
}

@article{richlandCognitiveSupportsAnalogies2007,
  langid = {english},
  title = {Cognitive {{Supports}} for {{Analogies}} in the {{Mathematics Classroom}}},
  volume = {316},
  issn = {0036-8075, 1095-9203},
  url = {https://science.sciencemag.org/content/316/5828/1128},
  doi = {10/bpv4x3},
  abstract = {Variations in the effective use of analogies in math instruction across countries may contribute to performance differences in the TIMSS studies.},
  number = {5828},
  journaltitle = {Science},
  urldate = {2019-10-08},
  date = {2007-05-25},
  pages = {1128-1129},
  author = {Richland, Lindsey E. and Zur, Osnat and Holyoak, Keith J.},
  eprinttype = {pmid},
  eprint = {17525320}
}

@article{ericssonRoleDeliberatePractice,
  langid = {english},
  title = {The {{Role}} of {{Deliberate Practice}} in the {{Acquisition}} of {{Expert Performance}}},
  doi = {10/d7gc4g},
  pages = {44},
  author = {Ericsson, K Anders and Krampe, Ralf Th and Tesch-Romer, Clemens}
}

@article{shuteFocusFormativeFeedback,
  langid = {english},
  title = {Focus on {{Formative Feedback}}},
  pages = {37},
  author = {Shute, Valerie J}
}

@article{rohrerInterleavedPracticeImproves2015,
  langid = {english},
  title = {Interleaved Practice Improves Mathematics Learning.},
  volume = {107},
  issn = {1939-2176, 0022-0663},
  url = {http://doi.apa.org/getdoi.cfm?doi=10.1037/edu0000001},
  doi = {10.1037/edu0000001},
  abstract = {A typical mathematics assignment consists primarily of practice problems requiring the strategy introduced in the immediately preceding lesson (e.g., a dozen problems that are solved by using the Pythagorean theorem). This means that students know which strategy is needed to solve each problem before they read the problem. In an alternative approach known as interleaved practice, problems from the course are rearranged so that a portion of each assignment includes different kinds of problems in an interleaved order. Interleaved practice requires students to choose a strategy on the basis of the problem itself, as they must do when they encounter a problem during a comprehensive examination or subsequent course. In the experiment reported here, 126 seventh-grade students received the same practice problems over a 3-month period, but the problems were arranged so that skills were learned by interleaved practice or by the usual blocked approach. The practice phase concluded with a review session, followed 1 or 30 days later by an unannounced test. Compared with blocked practice, interleaved practice produced higher scores on both the immediate and delayed tests (Cohen’s ds ϭ 0.42 and 0.79, respectively).},
  number = {3},
  journaltitle = {Journal of Educational Psychology},
  urldate = {2019-10-08},
  date = {2015},
  pages = {900-908},
  author = {Rohrer, Doug and Dedrick, Robert F. and Stershic, Sandra}
}

@article{butlerFeedbackSelfRegulatedLearning1995,
  langid = {english},
  title = {Feedback and {{Self}}-{{Regulated Learning}}: {{A Theoretical Synthesis}}},
  volume = {65},
  issn = {0034-6543, 1935-1046},
  url = {http://journals.sagepub.com/doi/10.3102/00346543065003245},
  doi = {10.3102/00346543065003245},
  shorttitle = {Feedback and {{Self}}-{{Regulated Learning}}},
  number = {3},
  journaltitle = {Review of Educational Research},
  urldate = {2019-10-08},
  date = {1995-09},
  pages = {245-281},
  author = {Butler, Deborah L. and Winne, Philip H.}
}

@article{braithwaiteEffectsVariationPrior2015,
  langid = {english},
  title = {Effects of {{Variation}} and {{Prior Knowledge}} on {{Abstract Concept Learning}}},
  volume = {33},
  issn = {0737-0008, 1532-690X},
  url = {http://www.tandfonline.com/doi/full/10.1080/07370008.2015.1067215},
  doi = {10/gf9kbq},
  number = {3},
  journaltitle = {Cognition and Instruction},
  urldate = {2019-10-08},
  date = {2015-07-03},
  pages = {226-256},
  author = {Braithwaite, David W. and Goldstone, Robert L.}
}

@incollection{holyoakUsingAnalogiesBasis2014,
  langid = {english},
  location = {{Boston, MA}},
  title = {Using {{Analogies}} as a {{Basis}} for {{Teaching Cognitive Readiness}}},
  isbn = {978-1-4614-7579-8},
  url = {https://doi.org/10.1007/978-1-4614-7579-8_12},
  abstract = {We review research showing ways in which analogies can be used to teach in a manner that fosters cognitive readiness for transfer. Although analogies are important teaching tools, it is important for teachers to be aware of potential pitfalls. Limits in relevant knowledge and processing capacity increase the likelihood that learners fail to notice or benefit from analogies in teaching. The aim of the teacher should be to assist the learner in developing veridical causal models of the domain or deep understanding of content structures. Major strategies for using analogies effectively in teaching include guided comparison of examples, highlighting of relations by principles and visual diagrams, ordering examples to encourage progressive alignment, and focusing attention on subgoals. The benefits of relational instruction are most apparent when the learner is later faced with novel problems that require extension and adaptation of the earlier examples used in training. We provide a list of recommendations for analogy-based teaching practices that can be customized to different learning contexts and training needs.},
  booktitle = {Teaching and {{Measuring Cognitive Readiness}}},
  publisher = {{Springer US}},
  urldate = {2019-10-08},
  date = {2014},
  pages = {223-238},
  author = {Holyoak, Keith J. and Richland, Lindsey E.},
  editor = {O'Neil, Harold F. and Perez, Ray S. and Baker, Eva L.},
  doi = {10.1007/978-1-4614-7579-8_12}
}

@article{ainsworthExaminingEffectsDifferent2002,
  langid = {english},
  title = {Examining the {{Effects}} of {{Different Multiple Representational Systems}} in {{Learning Primary Mathematics}}},
  volume = {11},
  issn = {1050-8406, 1532-7809},
  url = {http://www.tandfonline.com/doi/abs/10.1207/S15327809JLS1101_2},
  doi = {10.1207/S15327809JLS1101_2},
  number = {1},
  journaltitle = {Journal of the Learning Sciences},
  urldate = {2019-10-08},
  date = {2002-01},
  pages = {25-61},
  author = {Ainsworth, Shaaron and Bibby, Peter and Wood, David}
}

@article{catramboneSubgoalLearningModel,
  langid = {english},
  title = {The {{Subgoal Learning Model}}: {{Creating Better Examples So That Students Can Solve Novel Problems}}},
  doi = {10/bpspdd},
  pages = {22},
  author = {Catrambone, Richard}
}

@article{goldstoneTransferScientificPrinciples2005,
  langid = {english},
  title = {The {{Transfer}} of {{Scientific Principles Using Concrete}} and {{Idealized Simulations}}},
  volume = {14},
  issn = {1050-8406, 1532-7809},
  url = {http://www.tandfonline.com/doi/abs/10.1207/s15327809jls1401_4},
  doi = {10/bx58x7},
  number = {1},
  journaltitle = {Journal of the Learning Sciences},
  urldate = {2019-10-08},
  date = {2005-01},
  pages = {69-110},
  author = {Goldstone, Robert L. and Son, Ji Y.}
}

@article{catramboneGeneralizingSolutionProceduresa,
  langid = {english},
  title = {Generalizing {{Solution Procedures Learned From Examples}}},
  doi = {10/ccxs7m},
  pages = {12},
  author = {Catrambone, Richard}
}


